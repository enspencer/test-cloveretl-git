<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Jaro" created="Thu Jul 19 14:05:17 CEST 2012" guiVersion="4.1.0" id="1342706518598" licenseCode="CLP1DJAVLI58889773BY" licenseType="Commercial" modified="Fri Jul 24 18:16:47 CEST 2015" modifiedBy="magda" name="profiling_firewall" nature="jobflow" revision="1.92" showComponentDetails="true">
<Global>
<Metadata id="jobMetadata" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" keyFieldNames="filePath" name="processJob" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="filePath" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter name="DATA_FAILED" value="${DATAOUT_DIR}/incoming_failed/${RUN_ID}/">
<ComponentReference referencedComponent="MOVE_TO_FAILED" referencedProperty="targetURL"/>
</GraphParameter>
<GraphParameter name="DATA_PROCESSED" value="${DATAOUT_DIR}/incoming_processed/${RUN_ID}/">
<ComponentReference referencedComponent="MOVE_TO_PROCESSED" referencedProperty="targetURL"/>
</GraphParameter>
<GraphParameter name="DATA_REJECTED" value="${DATAOUT_DIR}/incoming_rejected/${RUN_ID}/">
<ComponentReference referencedComponent="MOVE_TO_REJECTED" referencedProperty="targetURL"/>
</GraphParameter>
<GraphParameter name="DATA_STAGING" value="${DATATMP_DIR}/staging/${RUN_ID}/">
<ComponentReference referencedComponent="COPY_TO_STAGING" referencedProperty="targetURL"/>
</GraphParameter>
<GraphParameter name="EVENT_FILE_NAME" value="employees.csv"/>
<GraphParameter name="EVENT_FILE_PATH" value="${DATAIN_DIR}/05-ErrorHandling-DataQualityFirewall">
<SingleType multiple="false" name="file" selectionMode="directory_only"/>
</GraphParameter>
<GraphParameter name="GRAPH_FIREWALL" value="${GRAPH_DIR}/05-ErrorHandling-DataQualityFirewall/profile_incoming.grf">
<ComponentReference referencedComponent="DATA_QUALITY_FIREWALL" referencedProperty="jobURL"/>
</GraphParameter>
<GraphParameter name="GRAPH_PROCESS" value="${GRAPH_DIR}/05-ErrorHandling-DataQualityFirewall/process_incoming.grf">
<ComponentReference referencedComponent="PROCESS" referencedProperty="jobURL"/>
</GraphParameter>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="197" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="A. Scenario" titleColorB="64" titleColorG="64" titleColorR="64" titleFontSize="10" width="211" x="20" y="103">
<attr name="text"><![CDATA[Let's process incoming files that appear in a directory. That means running a single ETL transformation on each of the files.

The files first need to be checked to meet data quality standards before processing them.]]></attr>
</Note>
<Note alignment="2" backgroundColorB="64" backgroundColorG="64" backgroundColorR="64" enabled="true" folded="false" height="84" id="Note2" textColorB="255" textColorG="255" textColorR="255" textFontSize="10" title="Example 05: Data Quality Firewall" titleColorB="255" titleColorG="255" titleColorR="255" titleFontSize="13" width="900" x="20" y="20">
<attr name="text"><![CDATA[
This example shows how to check quality of incoming data before processing them.
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="197" id="Note3" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="B. Problem" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="211" x="230" y="103">
<attr name="text"><![CDATA[Processing of the data should be clearly and easily separated from the data quality check.

We need to properly track and report which files have been checked for data quality and processed successfully and which have failed. ]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="197" id="Note4" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="C. Solution" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="211" x="440" y="103">
<attr name="text"><![CDATA[To check the quality of data we execute a graph that uses the ProfilerProbe component. Processing of the file is performed as a separate step.

Tracking results of various steps of the jobflow  is done via file operations that move files into special directories.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="197" id="Note5" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Notes" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="270" x="650" y="103">
<attr name="text"><![CDATA[This jobflow assumes that it is called by a file trigger - a File Event Listener should be configured on the server to monitor a directory for new files. The listener provides us with a path to the new file via EVENT_FILE_NAME and EVENT_FILE_PATH parameters. The parameters are accessed in the first step of the jobflow.

Files used by different runs of this jobflow are isolated by creating directories using the Run ID - see the file paths using RUN_ID parameter.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="207" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Get file path" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="178" x="20" y="317">
<attr name="text"><![CDATA[









Gets file path from file trigger via graph parameters.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="Copy to staging" guiX="218" guiY="357" id="COPY_TO_STAGING" makeParentDirs="true" targetURL="${DATA_STAGING}" type="COPY_FILES" verboseOutput="true">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.sourceURL = $in.0.filePath;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="standardOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.filePath = $in.1.resultURL;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Data Quality Firewall" guiX="384" guiY="357" id="DATA_QUALITY_FIREWALL" jobURL="${GRAPH_FIREWALL}" type="EXECUTE_GRAPH">
<attr name="errorMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.* = $in.0.*;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.INCOMING_PATH = $in.0.filePath;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Get file path" guiX="45" guiY="357" id="GET_FILE_PATH" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	// file event listeners set EVENT_FILE_PATH and EVENT_FILE_NAME parameters,
	// this component accesses them and creates the full path

	string originalPath = '${EVENT_FILE_PATH}';
	string path = replace(originalPath, "\\\\\\\\", "/");	// convert windows path
	string name = '${EVENT_FILE_NAME}';
	$out.0.filePath = path + "/" + name;
	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Move to failed" guiX="765" guiY="457" id="MOVE_TO_FAILED" makeParentDirs="true" targetURL="${DATA_FAILED}" type="MOVE_FILES">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.sourceURL = $in.0.filePath;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Move to processed" guiX="761" guiY="357" id="MOVE_TO_PROCESSED" makeParentDirs="true" targetURL="${DATA_PROCESSED}" type="MOVE_FILES">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.sourceURL = $in.0.filePath;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Move to rejected" guiX="392" guiY="457" id="MOVE_TO_REJECTED" makeParentDirs="true" targetURL="${DATA_REJECTED}" type="MOVE_FILES">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.sourceURL = $in.0.filePath;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Process" guiX="569" guiY="357" id="PROCESS" jobURL="${GRAPH_PROCESS}" type="EXECUTE_GRAPH">
<attr name="errorMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.* = $in.0.*;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.INPUT_PATH = $in.0.filePath;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge fromNode="COPY_TO_STAGING:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="jobMetadata" outPort="Port 0 (out)" toNode="DATA_QUALITY_FIREWALL:0"/>
<Edge fromNode="DATA_QUALITY_FIREWALL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="jobMetadata" outPort="Port 0 (out)" toNode="PROCESS:0"/>
<Edge fromNode="DATA_QUALITY_FIREWALL:1" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="jobMetadata" outPort="Port 1 (error)" toNode="MOVE_TO_REJECTED:0"/>
<Edge fromNode="GET_FILE_PATH:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="jobMetadata" outPort="Port 0 (out)" toNode="COPY_TO_STAGING:0"/>
<Edge fromNode="PROCESS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="jobMetadata" outPort="Port 0 (out)" toNode="MOVE_TO_PROCESSED:0"/>
<Edge fromNode="PROCESS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" metadata="jobMetadata" outPort="Port 1 (error)" toNode="MOVE_TO_FAILED:0"/>
</Phase>
<Phase number="1">
<Node enabled="enabled" fileURL="${DATA_STAGING}" guiName="Delete staging" guiX="20" guiY="542" id="DELETE_STAGING" recursive="true" type="DELETE_FILES"/>
</Phase>
</Graph>
