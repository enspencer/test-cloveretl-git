<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Wesley" created="Tue Jul 31 13:22:30 CEST 2012" guiVersion="4.1.0" id="1343742976656" licenseCode="CLP1DJAVLI58889773BY" licenseType="Commercial" modified="Mon Jul 27 08:15:02 CEST 2015" modifiedBy="magda" name="example01_A" nature="jobflow" revision="1.75" showComponentDetails="true">
<Global>
<Metadata id="ExecuteGraph_RunStatus" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="ExecuteGraph_RunStatus" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="runId" nullable="true" shift="0" size="0" type="long"/>
<Field eofAsDelimiter="false" name="originalJobURL" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" format="yyyy-MM-dd" name="startTime" nullable="true" shift="0" size="0" type="date"/>
<Field eofAsDelimiter="false" format="yyyy-MM-dd" name="endTime" nullable="true" shift="0" size="0" type="date"/>
<Field eofAsDelimiter="false" name="duration" nullable="true" shift="0" size="0" type="long"/>
<Field eofAsDelimiter="false" name="status" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="errException" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="errMessage" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="errComponent" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="errComponentType" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="dtFileInfo" nullable="true" shift="0" size="0" type="string"/>
</Record>
</Metadata>
<MetadataGroup name="Implicit metadata" type="implicit">
<Metadata id="__static_metadata_LIST_FILES_ListFiles_Result">
<Record fieldDelimiter="|" name="ListFiles_Result" recordDelimiter="\n" type="delimited">
<Field name="URL" type="string"/>
<Field name="name" type="string"/>
<Field name="canRead" trim="true" type="boolean"/>
<Field name="canWrite" trim="true" type="boolean"/>
<Field name="canExecute" trim="true" type="boolean"/>
<Field name="isDirectory" trim="true" type="boolean"/>
<Field name="isFile" trim="true" type="boolean"/>
<Field name="isHidden" trim="true" type="boolean"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="lastModified" trim="true" type="date"/>
<Field name="size" trim="true" type="long"/>
<Field name="result" trim="true" type="boolean"/>
<Field name="errorMessage" type="string"/>
<Field name="stackTrace" type="string"/>
</Record>
</Metadata>
<Metadata id="__static_metadata_DELETE_FILES_DeleteFiles_Result">
<Record fieldDelimiter="|" name="DeleteFiles_Result" recordDelimiter="\n" type="delimited">
<Field name="fileURL" type="string"/>
<Field name="result" trim="true" type="boolean"/>
<Field name="errorMessage" type="string"/>
<Field name="stackTrace" type="string"/>
</Record>
</Metadata>
<Metadata id="__static_metadata_COPY_FILES_CopyFiles_Result">
<Record fieldDelimiter="|" name="CopyFiles_Result" recordDelimiter="\n" type="delimited">
<Field name="sourceURL" type="string"/>
<Field name="targetURL" type="string"/>
<Field name="resultURL" type="string"/>
<Field name="result" trim="true" type="boolean"/>
<Field name="errorMessage" type="string"/>
<Field name="stackTrace" type="string"/>
</Record>
</Metadata>
</MetadataGroup>
<GraphParameters>
<GraphParameterFile fileURL="param/parameters_03.prm"/>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="233" id="Note6" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Notes" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="270" x="650" y="103">
<attr name="text"><![CDATA[Related Processes:
- 03-ErrorHandling-Basic.jbf (Main)
- 03-Graph-1.grf

Notes:
- 2nd data file is designed to fail in order to demonstrate the error capturing and logging process
- The EmailSender is intentionally disabled; please enter correct SMTP details for it to work]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="233" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="A. Scenario" titleColorB="64" titleColorG="64" titleColorR="64" titleFontSize="10" width="211" x="20" y="103">
<attr name="text"><![CDATA[To process all files in a given folder. That means running a single ETL transformation on each of the files.

Also to notify user when the file processing fails]]></attr>
</Note>
<Note alignment="2" backgroundColorB="64" backgroundColorG="64" backgroundColorR="64" enabled="true" folded="false" height="84" id="Note3" textColorB="255" textColorG="255" textColorR="255" textFontSize="10" title="Example 03: Simple handling of processing failures" titleColorB="255" titleColorG="255" titleColorR="255" titleFontSize="13" width="900" x="20" y="20">
<attr name="text"><![CDATA[
This example shows how to setup a simple error handling/reporting environment around an ETL job.
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="233" id="Note4" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="B. Problem" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="211" x="230" y="103">
<attr name="text"><![CDATA[The need to isolate the source files to process them individually and clean up the staging environment afterwards.

To notify user either via email or error log]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="233" id="Note5" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="C. Solution" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="211" x="440" y="103">
<attr name="text"><![CDATA[We first copy the source files to a staging area

The next step is to list the files individually

Each listed file is then sent to an ETL job for processing

After successful process, the file is removed from the staging area

If the file processing fails, user is notified via email or error log]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="260" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Log Errors" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="231" x="653" y="521"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="Copy Files" guiX="20" guiY="388" id="COPY_FILES" makeParentDirs="true" sourceURL="${DATAIN_03_DIR}/*.dat" targetURL="${DATATMP_03_DIR}/" type="COPY_FILES" verboseOutput="false">
<attr name="standardOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.sourceURL = $in.1.sourceURL;
	$out.0.targetURL = $in.1.targetURL;
	$out.0.resultURL = $in.1.resultURL;
	$out.0.result = $in.1.result;
	$out.0.errorMessage = $in.1.errorMessage;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Delete Files" guiX="685" guiY="388" id="DELETE_FILES" type="DELETE_FILES">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.fileURL = $in.0.dtFileInfo;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="standardOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.fileURL = $in.1.fileURL;
	$out.0.result = $in.1.result;
	$out.0.errorMessage = $in.1.errorMessage;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="File Processing Complete" guiX="911" guiY="388" id="FILE_PROCESSING_COMPLETE" type="SUCCESS"/>
<Node enabled="enabled" fileURL="${DATATMP_03_DIR}" guiName="ListFiles" guiX="236" guiY="388" id="LIST_FILES0" type="LIST_FILES">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.fileURL = $in.0.targetURL;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="standardOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.result = $in.1.result;
	$out.0.errorMessage = $in.1.errorMessage;
	$out.0.URL = $in.1.URL;
	$out.0.name = $in.1.name;
	$out.0.canRead = $in.1.canRead;
	$out.0.canWrite = $in.1.canWrite;
	$out.0.canExecute = $in.1.canExecute;
	$out.0.isDirectory = $in.1.isDirectory;
	$out.0.isFile = $in.1.isFile;
	$out.0.isHidden = $in.1.isHidden;
	$out.0.lastModified = $in.1.lastModified;
	$out.0.size = $in.1.size;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Process Each File" guiX="453" guiY="388" id="PROCESS_EACH_FILE" jobURL="${GRAPH_DIR}/03-ErrorHandling-Basic/03-Graph-1.grf" stopOnFail="false" type="EXECUTE_GRAPH">
<attr name="errorMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.runId = $in.1.runId;
	$out.1.originalJobURL = $in.1.originalJobURL;
	$out.1.startTime = $in.1.startTime;
	$out.1.endTime = $in.1.endTime;
	$out.1.duration = $in.1.duration;
	$out.1.status = $in.1.status;
	$out.1.errException = $in.1.errException;
	$out.1.errMessage = $in.1.errMessage;
	$out.1.errComponent = $in.1.errComponent;
	$out.1.errComponentType = $in.1.errComponentType;
	$out.1.dtFileInfo = $in.0.URL;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.PRM_OUTPUT_DIR = "${DATAOUT_03_DIR}";
	$out.1.PRM_INPUT_FILE = $in.0.URL;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.runId = $in.1.runId;
	$out.0.originalJobURL = $in.1.originalJobURL;
	$out.0.startTime = $in.1.startTime;
	$out.0.endTime = $in.1.endTime;
	$out.0.duration = $in.1.duration;
	$out.0.status = $in.1.status;
	$out.0.errException = $in.1.errException;
	$out.0.errMessage = $in.1.errMessage;
	$out.0.errComponent = $in.1.errComponent;
	$out.0.errComponentType = $in.1.errComponentType;
	$out.0.dtFileInfo = $in.0.URL;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="disabled" guiName="Send Email if Failed" guiX="692" guiY="679" id="SEND_EMAIL_IF_FAILED" message="MessageBody=$errMessage&#10;Subject=File has failed to process correctly&#10;To=user.to@example.com&#10;From=user.from@example.com&#10;" smtpPassword="password" smtpServer="mail.example.com" smtpUser="user.name" type="EMAIL_SENDER"/>
<Node enabled="enabled" fileURL="${DATAOUT_03_DIR}/error_log.xml" guiName="StructuredDataWriter" guiX="692" guiY="572" id="STRUCTURE_WRITER0" makeDirs="true" type="STRUCTURE_WRITER"/>
<Edge debugMode="true" fromNode="COPY_FILES:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="__static_metadata_COPY_FILES_CopyFiles_Result" toNode="LIST_FILES0:0"/>
<Edge debugMode="true" fromNode="DELETE_FILES:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="__static_metadata_DELETE_FILES_DeleteFiles_Result" toNode="FILE_PROCESSING_COMPLETE:0"/>
<Edge debugMode="true" fromNode="LIST_FILES0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="__static_metadata_LIST_FILES_ListFiles_Result" toNode="PROCESS_EACH_FILE:0"/>
<Edge debugMode="true" fromNode="PROCESS_EACH_FILE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="ExecuteGraph_RunStatus" outPort="Port 0 (out)" toNode="DELETE_FILES:0"/>
<Edge debugMode="true" fromNode="PROCESS_EACH_FILE:1" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (Body port)" metadata="ExecuteGraph_RunStatus" outPort="Port 1 (error)" toNode="STRUCTURE_WRITER0:0"/>
</Phase>
</Graph>
